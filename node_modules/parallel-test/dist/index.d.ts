import TypedEmitter from 'typed-emitter';
declare const testEvents: TypedEmitter<{
    testRegistered: () => void;
    suiteLoading: () => void;
    suiteLoaded: () => void;
    suiteFinished: () => void;
    testError: (test: Test, error: Error) => void;
}>;
interface Test {
    description: string;
    testFunction: () => Promise<void> | void;
}
interface TestSuiteOptions {
    /**
     * The maximum amount of time that tests in the suite are allowed to run. Defaults to `3600`.
     *
     * If, at the end of this time, tests are still running
     *      If there were any failures, exit with a failure
     *      If there were no failures, exit with a success
     */
    maximumDurationSeconds: number;
    /**
     * Whether to exit immediately when a test fails. Defaults to `true`.
     *
     * If the value is `true`, when a test fails, the rest of the test run will be canceled.
     * If the value is `false`, when a test fails, the rest of the test run will continue.
     */
    exitOnFailure: boolean;
}
export default test;
export { setTestSuiteOptions, testEvents, };
declare function test(description: Test['description'], testFunction: Test['testFunction']): void;
declare function setTestSuiteOptions(newOptions: Partial<TestSuiteOptions>): void;
